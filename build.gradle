plugins {
  id "org.xtend.xtend" version "0.4.7"
  id "nebula.provided-base" version "2.2.2"
  id "com.jfrog.bintray" version "1.2"
}

apply plugin: 'provided-base'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

version = '0.1.3'
group = 'net.alchim31.jme3'

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
	maven { url "http://updates.jmonkeyengine.org/maven/"}
	maven { url "http://dl.bintray.com/jmonkeyengine/contrib" }
	maven { url "https://jitpack.io" }
}

task exec(type:JavaExec) {
   main = System.getProperty("exec.mainClass") ?: "sandbox.Main"
   classpath = sourceSets.test.runtimeClasspath
}

def jme_version = '3.1.0-snapshot-github'
def jme_group = 'com.jme3'

//def jme_version = '72e1213'
//def jme_group = 'com.github.davidB.jmonkeyengine'

//def jme_version = 'b8fe36e'
//def jme_group = 'com.github.jMonkeyEngine.jmonkeyengine'
def v_slf4j = '1.7.7'

configurations {
	fmpp
}


dependencies {
	compile 'org.eclipse.xtend:org.eclipse.xtend.lib:2.8.+'
	compile 'io.reactivex:rxjava:1.0.8'
	compile "org.slf4j:slf4j-api:${v_slf4j}"
	compile "${jme_group}:jme3-core:${jme_version}"
	compile "${jme_group}:jme3-lwjgl:${jme_version}"
	testRuntime "${jme_group}:jme3-desktop:${jme_version}"

//	provided "com.jme3:jme3-core:${v_jme}"
//	provided "com.jme3:jme3-lwjgl:${v_jme}"
	//provided "com.jme3:jme3-effects:${v_jme}"
	//compile "org.lwjgl.lwjgl:lwjgl:2.9.3"
//	testRuntime "com.jme3:jme3-desktop:${v_jme}"
	testRuntime "org.slf4j:slf4j-jdk14:${v_slf4j}"
	testCompile 'junit:junit:4.11'
	testCompile 'org.mockito:mockito-core:1.8.5'
	testCompile "net.alchim31.assets:crytek_sponza2:0.1.0"
	testCompile "net.alchim31.assets:teapot:0.2.0"
	testCompile "net.alchim31.assets:broken_cube:0.1.0"
	testCompile "com.jme3:jme3-jbullet:3.0.10"
	//testCompile "${jme_group}:jme3-jbullet:${jme_version}"
	//testCompile "${jme_group}:jme3-bullet:${jme_version}"
	fmpp 'net.sourceforge.fmpp:fmpp:0.9.14'
}

def generated_assets_dir = "$buildDir/generated-sources/assets"

sourceSets {
	main {
		resources {
			srcDirs = ["$projectDir/src/main/resources", generated_assets_dir]
			exclude "**/.keep"
			exclude "**/*.blend*"
			exclude "**/*.ftl"
		}
	}
	test {
		resources {
			exclude "**/.keep"
		}
	}
}

task copyDeps(type: Copy) {
	from (configurations.runtime + configurations.testCompile)
	into 'lib'
}

task fmpp() << {
	println "Generating sources...."
	ant.taskdef(name:'fmpp', classname:'fmpp.tools.AntTask', classpath:configurations.fmpp.asPath);
	ant.fmpp(
		configuration:"fmpp.cfg"
		, sourceRoot:"$projectDir/src/main/resources"
		, includes: "**/*.frag.ftl,**/*.vert.ftl, **/*.glsllib.ftl"
		, outputRoot: generated_assets_dir
	)
}
compileJava.dependsOn(fmpp)

// see https://cvs.khronos.org/svn/repos/ogl/trunk/ecosystem/public/sdk/tools/glslang/Install/
task glslValidate(type:Exec) {
  executable 'glslangValidator'
  //args "-d"
  //args fileTree(dir: generated_assets_dir, includes: ['**/*.frag', '**/*.vert']).getFiles()
  args fileTree(dir: "$projectDir/src/main/resources", includes: ['**/*.frag', '**/*.vert']).getFiles()
  //args fileTree(dir: generated_assets_dir, includes: ['**/deferred.frag']).getFiles()
  workingDir generated_assets_dir
  errorOutput System.err
  standardOutput System.out
  //commandLine 'cmd', '/c', 'stop.bat'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}
	//jar.dependsOn sourcesJar

def pomConfig = {
	licenses {
		license {
			name "Public domain (CC0-1.0)"
			url "http://creativecommons.org/publicdomain/zero/1.0/"
			distribution "repo"
		}
	}
	developers {
		developer {
			id "davidB"
			name "David Bernard"
		}
	}
}

publishing {
	publications {
		mavenStuff(MavenPublication) {
			from components.java
			artifact sourcesJar
			pom.withXml {
				def root = asNode()
				if (description) root.appendNode('description', description)
				root.children().last() + pomConfig
			}
		}
	}
}

bintray {
	user = bintray_user
	key = bintray_api_key

	publications = ['mavenStuff'] //When uploading Maven-based publication files
	//dryRun = false //Whether to run this as dry-run, without deploying
	publish = true //If version should be auto published after an upload
	pkg {
		repo = 'jme3stuff'
		name = project.name
		desc = description
		websiteUrl = "https://github.com/davidB/${project.name}"
		issueTrackerUrl = "https://github.com/davidB/${project.name}/issues"
		vcsUrl = "https://github.com/davidB/${project.name}.git"
		licenses = ['CC0-1.0']
		labels = ['jme3']
		publicDownloadNumbers = true
		version {
			name = project.version
			vcsTag = project.version
			//attributes = []
			//gpg {
			//	sign = true //Determines whether to GPG sign the files. The default is false
			//	passphrase = 'optional, the passphrase for GPG signing'
			//}
		}
	}
}
eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
	}
}
