const int QUALITY_LOW  = 0,
          QUALITY_MED  = 1,
          QUALITY_HIGH = 2;

const float PI = 3.14159265358979323846264;
const float ONE_OVER_PI = 1.0 / PI;
const float PI_OVER_FOUR = PI / 4.0;
const float PI_OVER_TWO = PI / 2.0;

// Use this instead of Lambert for the diffuse part
float OrenNayar(vec3 normal, vec3 lightDir, vec3 viewDir, float roughness)
{
    float vdotl = max(0.0, dot(viewDir, lightDir));
    float ndotv = max(0.0, dot(normal, viewDir));
    float ndotl = max(0.0, dot(normal, lightDir));

    // theta_o = arcsin ndotv (as angle)
    // theta_i = arcsin ndotl
    float sigma2 = roughness * roughness;
    float A = 1.0  - (0.5 * sigma2) / (sigma2 + 0.33);
    float B = (0.45 * sigma2) / (sigma2 + 0.09);
    float alpha = max(ndotl, ndotv);
    float beta  = min(ndotl, ndotv);
    return (ndotl * ONE_OVER_PI) * (A + B * vdotl * sin(alpha) * tan(beta));
}

// Approximation of the above from Tri-Ace. 
// Doesn't use any trigonometric functions.
// Also uses gloss parameter instead of roughness.
float OrenNayarFast(vec3 normal, vec3 lightDir, vec3 viewDir, float gloss)
{
    float vdotl = max(0.0, dot(viewDir, lightDir));
    float ndotv = max(0.0, dot(normal, viewDir));
    float ndotl = max(0.0, dot(normal, lightDir));

    float sigma2 = 2.0 / gloss;
    float A = 1.0  - (0.5 * sigma2) / (sigma2 + 0.33);
    float B = (0.45 * sigma2) / (sigma2 + 0.09);

    return ndotl * A + (B * max(0.0, vdotl - (ndotv * ndotl)) * min(1.0, ndotl / ndotv) );
}

// NDF (normal distribution function) via GGX.
// Can use this instead of Blinn-Phong for higher quality.
float GGX(vec3 normal, vec3 halfVec, float roughness)
{
    float alpha = roughness * roughness;
    float ndoth = max(0.0, dot(normal, halfVec));  
    float alpha2 = alpha * alpha;
    float sum   = ((ndoth * ndoth) * (alpha2 - 1.0) + 1.0);
    float denom = PI * sum * sum;
    return alpha2 / denom;
}

/**
 * Image-based lighting via irradiance environment map. Unfinished.
 * 
 * @param tex An HDR specular irradiance environment map. Each mipmap level should have 
 *            a linearly decreasing gloss value (according to algorithm you selected
 *            for the direct light function). Use trilinear filtering for this texture.
 *            Recommended to use either a 256x256x6 or 128x128x6 cubemap. 
 *            The last mipmap must be 4x4x6 and nMips should reflect that.
 *            Use phong lobe and include the phong reduction factor of (gloss + 2) / 2pi.
 * @param nMips number of mipmaps in the cubemap. E.g. for 128x128x6 map there should be 6 (until 4x4x6).
 * @param normal Normal vector from normalmap or vertex normal. MUST BE NORMALIZED.
 * @param viewDir Direction from surface to eye / camera. MUST BE NORMALIZED.
 * @param spec See PBR_ComputeDirectLight for explanation.
 * @param gloss See PBR_ComputeDirectLight for explanation - this should be the direct from texture (e.g. undecoded) value.
 */
 /*
vec3 PBR_ComputeLightProbe(textureCube specMap, float nMips, vec3 normal, 
                           vec3 viewDir, float spec, float gloss,
                           out vec3 outDiffuse, out vec3 outSpecular)
{
    float ndotv = max( dot(normal, viewDir), 0.0);

    // TODO: Add support for diffuse.
    // vec3 diffuse  = textureCubeLod(tex, normal, 0.0).rgb;

    // float fresnel = spec + ( 1.0 - spec ) * pow( 1.0 - ndotv, 5.0 );

    // "Sébastien's Fudge Factor"
    float fresnel = spec + ( max(gloss, spec) - spec ) * pow( 1.0 - ndotv, 5.0 );

    vec3 reflectVec = reflect(viewDir, normal);
    float mipLevel  = nMips - gloss * nMips;

    #ifdef __VERSION__ >= 400
        // If GLSL 4.0 is available, we take the max level between the one 
        // GPU was going to use and the one we selected. 
        // This can reduce shimmering for far away glossy objects.
        float hwMipLevel = textureQueryLod(specMap, reflectVec).y;
        mipLevel = max(hwMipLevel, mipLevel);
        vec3 distribution = textureLod(specMap, reflectVec, mipLevel).rgb;
    #else
        vec3 distribution = textureCubeLod(specMap, reflectVec, mipLevel).rgb;
    #endif

    

    outSpecular = distribution * fresnel;
}
*/

/**
 * Computes physically-based lighting for the given light, 
 * based on Lambert for diffuse and Torrance-Sparrow microfacet BRDF for specular,
 * uses Blinn-Phong for the distribution function.
 * 
 * All vectors must be normalized and be in the same coordinate space.
 *
 * @param normal     Normal vector from normalmap or vertex normal. MUST BE NORMALIZED.
 * @param lightDir   Direction from surface to light. MUST BE NORMALIZED.
 * @param viewDir    Direction from surface to eye / camera. MUST BE NORMALIZED.
 * @param spec       Specularity / spectral reflectance / "metalness" / F-zero factor. 
 *                   Use the equation spec = ((1 - n) / (1 + n))^2, where n is the refractive index of the material.
 *                   Should be around 0.02 - 0.05 for dieeletric (non-metal) materials, use 0.5 and higher for metals. 
 *                   You can use blended values for metal covered with dirt for example. 
 *                   Recommend to retrieve this from metalness map if your material has both metallic and non-metallic parts,
 *                   but make sure to use more percision at lower values (obviously) so you can represent them.
 * @param gloss      Also known as "shininess", use values 2 - 2048.
 *                   Recommend to retrieve this from a gloss map if your material has both glossy and non-glossy parts.
 *                   If you use gloss map, use one of the following equations to convert texture (0 - 1) to 2 - 1024.
 *                   Make sure to choose one and stick with it.
 *                      2 ^ (x * 10 + 1)    - Sébastien's
 *                      2 ^ (13 * x)        - Far Cry 3 & Black Ops II
 * @param lightColor The color of the light, or the energy emission 
 *                   of the light at red, green, blue frequencies.
 *                   Can be (and should) be higher than 1.0 for HDR.
 * @param quality    One of QUALITY_*** values. QUALITY_LOW is just normalized blinn-phong, 
 *                   QUALITY_MED includes fresnel term, 
 *                   HIGH includes visibility term.
 */
void PBR_ComputeDirectLight(vec3 normal, vec3 lightDir, vec3 viewDir,
                            vec3 lightColor, float spec, float gloss, 
                            int quality, out vec3 outDiffuse, out vec3 outSpecular)
{
    // Compute halfway vector.
    vec3 halfVec = normalize(lightDir + viewDir);

    // Compute ndotl, ndoth, ndotv, vdoth and hdotl terms which are needed later.
    float ndotl = max( dot(normal,   lightDir), 0.0);
    float ndoth = max( dot(normal,   halfVec),  0.0);
    float hdotl = max( dot(lightDir, halfVec),  0.0);
    float ndotv = max( dot(normal,   viewDir),  0.0);
    float vdoth = max( dot(viewDir,  halfVec),  0.0);

    // Compute diffuse using energy-conserving Lambert.
    // Alternatively, use Oren-Nayar for really rough 
    // materials or if you have lots of processing power ...
    outDiffuse = vec3(ndotl) * lightColor;
    
    // Compute reduction function to have 
    // energy-conserving blinn-phong specular.
    // NOTE: This includes the division by 4 as well 
    // as the multiplication by PI from the lighting equation.
    // The reduction factor for Phong is        (g + 2) / 2pi
    // The reduction factor for Blinn-Phong     (g + 8) / 8pi
    // The reduction factor for Blinn-Phong IBL (g + 2) / 8pi
    float reduction = (gloss + 2.0) / 8.0;
    
    float visibility, fresnel;
    if (quality == QUALITY_HIGH)
    {
        // Compute Fresnel function via Schlick's approximation.
        fresnel = spec + ( 1.0 - spec ) * pow( 1.0 - hdotl, 5.0 );

        // Compute visibility function via Schlick-Smith
        // (combination of geometry function and microfacet denominator).
        float alpha = 1.0 / sqrt( PI_OVER_FOUR * gloss + PI_OVER_TWO );
        visibility = (ndotl * (1.0 - alpha) + alpha) * (ndotv * (1.0 - alpha) + alpha); 
        visibility = 1.0 / visibility;
    }
    else if (quality == QUALITY_MED)
    {
        // Faster fresnel function approximation from Black Ops II (more accurate at high angles)
        // fresnel = spec + ( 1.0 - spec ) * exp2( -10.0 * hdotl );

        // Faster fresnel function approximation from Far Cry 3 (more accurate at low / grazing angles)
        // fresnel = spec + ( 1.0 - spec ) * exp( -6.0  * hdotl );

        // More accurate fresnel function approximation from Sébastien
        fresnel = spec + ( 1.0 - spec ) * exp2((-5.55473 * hdotl - 6.98316) * hdotl);

        // "No approximation at all"
        // float base = 1.0 - hdotl;
        // fresnel = base * base;
        // fresnel = fresnel * fresnel * base;
        // fresnel = spec + ( 1.0 - spec ) * fresnel;

        // Faster visibility function approximation from Black Ops II
        // They don't like Kelemen-Szirmay-Kalos cause its too bright apparently ..
        // float alpha = min(1.0, gloss + 0.545);
        // visibility = vdoth * vdoth * alpha + (1.0 - alpha);
        // visibility = 1.0 / visibility;

        // Faster visibility function approximation from Filmic Worlds
        float k = (gloss * gloss) / 2.0;
        float k2 = k * k;
	    visibility = hdotl * hdotl * (1.0 - k2) + k2;
        visibility = 1.0 / visibility;
    }
    else // quality == QUALITY_LOW
    {
        // TODO: find better approximation for fresnel (?)
        // Maybe use look up tables if you're really desperate...
        fresnel = spec;

        // Even faster visibility function approximation via Kelemen-Szirmay-Kalos
        visibility = 1.0 / (hdotl * hdotl);

        // Another approach, not sure if the same ..
        // vec3 vplusl = lightDir + viewDir;
        // visibility = 4.0 / dot(vplusl,vplusl);
    }

    // Compute normal distribution function via Blinn-Phong.
    // Alternatively, use GGX instead of Blinn-Phong (Unreal Engine)
    float blinnPhong = pow(ndoth, gloss);
    
    // Compute product of specular factors.
    float specular = reduction * blinnPhong * ndotl * fresnel * visibility;

    outSpecular = vec3(specular) * lightColor;
}