MaterialDef debug_gbuffer {

	MaterialParameters {
		Boolean FullView
		Texture2D MatBuffer
		Texture2D NormalBuffer
		Texture2D DepthBuffer
		Texture2D AOBuffer
		Texture2D AlbedoBuffer
		Texture2D SpecularBuffer
		Texture2D LBuffer
		Vector3 FrustumCorner
		Int NbMatId
		Vector3 ClipInfo
		Vector4 ProjInfo

		// WorldParameters can't be used because the WorldParameters used when gbuffer are, make can be different
		// (eg gbuffer in 3D viewport, debug into 2D Gui viewport)
		Matrix4 ViewMatrixInverse
		Matrix4 ViewProjectionMatrixInverse
		Matrix4 ViewProjectionMatrix
		Vector2 Resolution
		Vector2 FrustumNearFar
	}

	Technique {
	}

	Technique fullgreen {
		VertexShader GLSL150:   Shaders/deferred/quad.vert
		FragmentShader GLSL150: Shaders/debug/show_fullgreen.frag
		WorldParameters {
			WorldViewProjectionMatrix
		}
		Defines {
			FULLVIEW : FullView
		}
	}

	Technique objgreen {
		VertexShader GLSL150:   Shaders/deferred/quad.vert
		FragmentShader GLSL150: Shaders/debug/show_objgreen.frag
		WorldParameters {
			WorldViewProjectionMatrix
		}
		Defines {
			FULLVIEW : FullView
		}
	}

	Technique normals {
		VertexShader GLSL150:   Shaders/deferred/quad.vert
		FragmentShader GLSL150: Shaders/debug/show_normals.frag
		WorldParameters {
			WorldViewProjectionMatrix
		}
		Defines {
			FULLVIEW : FullView
		}
	}

	Technique albedos {
		VertexShader GLSL150:   Shaders/deferred/quad.vert
		FragmentShader GLSL150: Shaders/debug/show_albedos.frag
		WorldParameters {
			WorldViewProjectionMatrix
		}
		Defines {
			FULLVIEW : FullView
		}
	}

	Technique depths {
		VertexShader GLSL150:   Shaders/deferred/quad.vert
		FragmentShader GLSL150: Shaders/debug/show_depths.frag
		WorldParameters {
			WorldViewProjectionMatrix
		}
		Defines {
			FULLVIEW : FullView
		}
	}

	Technique stencil {
		VertexShader GLSL150:   Shaders/deferred/quad.vert
		FragmentShader GLSL150: Shaders/debug/show_stencil.frag
		WorldParameters {
			WorldViewProjectionMatrix
		}
		Defines {
			FULLVIEW : FullView
		}
	}

	Technique ao {
		VertexShader GLSL150:   Shaders/deferred/quad.vert
		FragmentShader GLSL150: Shaders/debug/show_ao.frag
		WorldParameters {
			WorldViewProjectionMatrix
		}
		Defines {
			FULLVIEW : FullView
		}
	}

	Technique matIds {
		VertexShader GLSL150:   Shaders/deferred/quad.vert
		FragmentShader GLSL150: Shaders/debug/show_matIds.frag
		WorldParameters {
			WorldViewProjectionMatrix
		}
		Defines {
			FULLVIEW : FullView
		}
	}

	Technique mats {
		VertexShader GLSL150:   Shaders/deferred/quad.vert
		FragmentShader GLSL150: Shaders/debug/show_mats.frag
		WorldParameters {
			WorldViewProjectionMatrix
		}
		Defines {
			FULLVIEW : FullView
		}
	}
	Technique speculars {
		VertexShader GLSL150:   Shaders/deferred/quad.vert
		FragmentShader GLSL150: Shaders/debug/show_speculars.frag
		WorldParameters {
			WorldViewProjectionMatrix
		}
		Defines {
			FULLVIEW : FullView
		}
	}
	Technique positions {
		VertexShader GLSL150:   Shaders/deferred/quad.vert
		FragmentShader GLSL150: Shaders/debug/show_positions.frag
		WorldParameters {
			WorldViewProjectionMatrix
		}
		Defines {
			FULLVIEW : FullView
		}
	}
	Technique lights {
		VertexShader GLSL150:   Shaders/deferred/quad.vert
		FragmentShader GLSL150: Shaders/debug/show_lights.frag
		WorldParameters {
			WorldViewProjectionMatrix
		}
		Defines {
			FULLVIEW : FullView
		}
	}}
