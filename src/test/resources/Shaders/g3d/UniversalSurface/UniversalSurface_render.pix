#version 120 or 420 compatibility// -*- c++ -*-

/**
  \file UniversalSurface/UniversalSurface_render.pix
  \author Morgan McGuire, http://graphics.cs.williams.edu

  \created 2009-12-18
  \edited  2013-08-18
 */
#extension GL_ARB_shader_texture_lod : require  // For textureCubeLod
#extension GL_EXT_gpu_shader4 : require         // For texelFetch2D        
#extension GL_ARB_texture_query_lod : enable    // For textureQueryLod
#extension GL_EXT_gpu_shader4_1 : enable        // For textureQueryLod
#include <compatibility.glsl>
#include <g3dmath.glsl>
#include <LightingEnvironment/LightingEnvironment_uniforms.glsl>
#include <UniversalMaterial/UniversalMaterial.glsl>

#expect NUM_LIGHTMAP_DIRECTIONS "0, 1, or 3"
#ifdef NORMALBUMPMAP
#   expect PARALLAXSTEPS "int"
#endif 

uniform_UniversalMaterial( );

float backside = (gl_FrontFacing == g3d_InvertY) ? 1.0 : -1.0;

uniform float       radianceScale;
uniform float       emissiveRadianceScale;
uniform float       lightMapRadianceScale;

#ifdef GL_EXT_gpu_shader4
    uniform sampler2D   ambientOcclusion_buffer;
    uniform vec3        ambientOcclusion_size;
    uniform ivec2       ambientOcclusion_offset;
#endif

#if NUM_LIGHTMAP_DIRECTIONS > 0
    varying vec2 lightMapCoord;
#endif

/** Surface position in world space */
varying vec3        wsPosition;

varying vec2        texCoord;
varying vec3        tan_Z;

#ifdef NORMALBUMPMAP
#   if (PARALLAXSTEPS > 0)
        /** Un-normalized (interpolated) tangent space eye vector */
        varying vec3        _tsE;
#   endif    
    varying vec3        tan_X, tan_Y;
#endif

// These must appear after UniversalMaterial and after the definition of tan_Z and backside because they use macros
#include <Light/Light.glsl>
#include <BumpMap/BumpMap.glsl>
	
#if HAS_VERTEX_COLORS
    varying vec4 vertexColor;
#endif
	
void main() {    
    const vec3 BLACK = vec3(0.0, 0.0, 0.0);

    vec3 wsEyePos = g3d_CameraToWorldMatrix[3].xyz;

#   if defined(NORMALBUMPMAP)
        float rawNormalLength = 1.0;
        vec3 wsN;
        vec2 offsetTexCoord;
        vec3 tsN;
#       if (PARALLAXSTEPS > 0)
            bumpMap(normalBumpMap, bumpMapScale, bumpMapBias, texCoord, tan_X, tan_Y, tan_Z, backside, normalize(_tsE), wsN, offsetTexCoord, tsN, rawNormalLength, PARALLAXSTEPS);
#       else
            // Vanilla normal mapping
            bumpMap(normalBumpMap, 0.0, 0.0,                  texCoord, tan_X, tan_Y, tan_Z, backside, vec3(0.0),       wsN, offsetTexCoord, tsN, rawNormalLength, PARALLAXSTEPS);
#       endif

#   else
        // World space normal
        vec3 wsN = normalize(tan_Z.xyz * backside);
        vec2 offsetTexCoord = texCoord;
#   endif

    vec3 lambertianColor;
    float coverage;
    {
        vec4 temp = texture2D(LAMBERTIAN_buffer, offsetTexCoord) * LAMBERTIAN_readMultiplyFirst + LAMBERTIAN_readAddSecond;
#       if HAS_VERTEX_COLORS
            temp *= vertexColor;
#       endif

        lambertianColor = temp.rgb * invPi;
        coverage = temp.a;
    }
      
    // Eye vector
    vec3 wsE = normalize(wsEyePos - wsPosition);
    // or... (tangentToWorld * vec4(tsE, 0.0)).xyz;

    vec3 E_ambient = vec3(0.0);
    
#   if NUM_LIGHTMAP_DIRECTIONS == 0

        E_ambient += computeLambertianEnvironmentMapLighting(wsN);

#   elif NUM_LIGHTMAP_DIRECTIONS == 1

        // Use lightMap for lambertian
        E_ambient += texture2D(lightMap0, lightMapCoord).rgb * (lightMapConstant * lightMapRadianceScale);

#   elif NUM_LIGHTMAP_DIRECTIONS == 2

#       error Illegal number of lightMap directions

#   elif NUM_LIGHTMAP_DIRECTIONS == 3

#       if defined(NORMALBUMPMAP)
            E_ambient += radiosityNormalMap(lightMap0, lightMap1, lightMap2, lightMapCoord, tsN) * (lightMapConstant * lightMapRadianceScale);
#       else
            // If there's no normal map, then the lightMap axes will all be at the same angle to this surfel,
            // so there's no need to compute dot products: just average
            E_ambient += (texture2D(lightMap0, lightMapCoord).rgb + texture2D(lightMap1, lightMapCoord).rgb + texture2D(lightMap2, lightMapCoord).rgb) * (lightMapRadianceScale * lightMapConstant * (1.0 / 3.0));
#       endif
#   endif

    vec3 E_glossy = BLACK, E_glossyAmbient = BLACK;
    float glossyExponent = 1, glossyCoefficient = 0;

#   if defined(EMISSIVECONSTANT) || defined(EMISSIVEMAP)     
        vec3 emissiveColor =
#       ifdef EMISSIVECONSTANT
            emissiveConstant
#           ifdef EMISSIVEMAP
                * texture2D(emissiveMap, offsetTexCoord).rgb
#           endif
#       else
            texture2D(emissiveMap, offsetTexCoord).rgb
#       endif
        ;
#   endif

    vec4 F0;
    Color3 glossyColor;
    float cos_o = dot(wsN, wsE);
        
    // If 1.0, mirror glossy reflect
    // If 0.0, no glossy
    // Otherwise exponent = glossyExponent * 127 + 1. 
    {        
        F0 = texture2D(GLOSSY_buffer, offsetTexCoord) * GLOSSY_readMultiplyFirst + GLOSSY_readAddSecond;
                   
        Color3 F = computeF(F0.rgb, max(0.0, cos_o), F0.a);

        // Modulate the lambertian color by the Fresnel factor; this
        // ensures energy conservation at glancing angles under
        // Fresnel effects.
        lambertianColor.rgb *= 1.0 - F;

        glossyExponent = unpackGlossyExponent(F0.a);
#       if defined(NORMALBUMPMAP)
            glossyExponent = computeToksvigGlossyExponent(glossyExponent, rawNormalLength);
#       endif

        // G = F * (s_X + 8) / (8 pi)
        glossyColor = F * ((glossyExponent + 8.0) / (8.0 * pi));

        // Mirror reflection vector
        vec3 w_mi = normalize(wsN * (2.0 * cos_o) - wsE);

        // Take out the normalization factor from the exponent, since that is a normalization
        // of the cosine lobe which does not appear for environment lighting
        E_glossyAmbient += computeGlossyEnvironmentMapLighting(w_mi, (F0.a == 1.0), glossyExponent) / 
            ((glossyExponent + 8.0) / (8.0 * pi));
    }
       
    Color3 E_lambertian = Color3(0.0);

    computeDirectLighting(wsN, wsE, tan_Z, backside, wsPosition, glossyExponent, E_lambertian, E_glossy);

    float AO = 
#       if defined(GL_EXT_gpu_shader4) && defined(ambientOcclusion_notNull)
            (0.95 * texelFetch(ambientOcclusion_buffer, min(ivec2(gl_FragCoord.xy) + ambientOcclusion_offset, ivec2(ambientOcclusion_size.xy) - ivec2(1, 1)), 0).r + 0.05);
#       else
            1.0;
#       endif

    // How much ambient occlusion to apply to direct illumination (sort of approximates area lights,
    // more importantly: NPR term that adds local contrast)
    const float aoInfluenceOnDirectIllumination = 0.65;
    float directAO = lerp(1.0, AO, aoInfluenceOnDirectIllumination);

    // Outgoing light
    Radiance3 L_o =
        radianceScale *
        ((E_lambertian * directAO + E_ambient * AO) * lambertianColor +
         (E_glossy * directAO     + E_glossyAmbient * AO) * glossyColor

#       if defined(EMISSIVECONSTANT) || defined(EMISSIVEMAP)
            + emissiveColor * emissiveRadianceScale
#       endif
         );

    gl_FragColor = vec4(L_o, coverage);
}


