#version 120 // -*- c++ -*-
#include <compatibility.glsl>
/**
    \file UniversalSurface_depthOnlyWithAlpha.pix
    \author Michael Mara, http://www.illuminationcodified.com

    For depth only passes with both parallax mapping and alpha components

    \created 2012-10-06
    \edited  2012-11-19
 */
#expect USE_PARALLAX_MAPPING
#expect USE_DEPTH_PEEL

varying vec2        texCoord;
uniform sampler2D   lambertianMap;

#if (USE_PARALLAX_MAPPING != 0)
    /** Surface position in world space */
    varying vec3        wsPosition;

#   include <BumpMap/BumpMap.glsl>
    // We know parallax steps >= 1, if we've gotten into this shader
#   expect PARALLAXSTEPS
#   if (PARALLAXSTEPS == 1)
#       define bumpMap bumpMapWelsh04
#   else // PARALLAXSTEPS > 1
#       define bumpMap bumpMapTatarchuk06
#   endif

    varying vec3        tan_Z;

    /** Multiplier for bump map.  Typically on the range [0, 0.05]
        This increases with texture scale and bump height. */
    uniform float       bumpMapScale;

    /** How high is the 0-level of the bump map? On the range [0, 1] */
    uniform float       bumpMapBias;

    /** Un-normalized (interpolated) tangent space eye vector */
    varying vec3        _tsE;
   
    /** xyz = normal, w = bump height */
    uniform sampler2D   normalBumpMap;
    varying vec3        tan_X, tan_Y;
#endif

#if (USE_DEPTH_PEEL != 0)
#   include <depthPeel.glsl>
    /** Need not be at the same resolution as the current depth buffer. 
        For samples to be written, they must be at greater gl_FragCoord.z values
        than those in this buffer.*/
    uniform sampler2D previousDepthBuffer;

    /**
     textureSize(previousDepthBuffer) / textureSize(currentDepthBuffer)
     */
    uniform float2    currentToPreviousScale;

    /** Minimum depth buffer value distance (on [0,1]) that new faces 
        must be beyond previousDepthBuffer to be written. */
    uniform float     minZSeparation;

    uniform float3    clipInfo;
#endif

/** Alpha test constant */
uniform float alphaThreshold;


void main() {
#   if (USE_DEPTH_PEEL != 0)
        if (isDepthPeeled(previousDepthBuffer, currentToPreviousScale, minZSeparation, gl_FragCoord.xyz, clipInfo)) {
            discard;
        }
#   endif

    vec2 offsetTexCoord;
#   if (USE_PARALLAX_MAPPING != 0)
        vec3 wsN;
        vec3 tsN;
        float rawNormalLength = 1.0;
        float backside = (gl_FrontFacing == g3d_InvertY) ?  1.0 : -1.0;
        bumpMap(normalBumpMap, bumpMapScale, bumpMapBias, texCoord, tan_X, tan_Y, tan_Z, backside, normalize(_tsE), wsN, offsetTexCoord, tsN, rawNormalLength, PARALLAXSTEPS);
#   else 
        offsetTexCoord = texCoord;
#   endif
    
    if (texture2D(lambertianMap, offsetTexCoord).a < alphaThreshold) {
        discard;
    }
    gl_FragColor.a = 1.0; // Disable color write
}


